% Felix's Node.js Beginners Guidenode.js에대한 자료는 매우 많이 있다. node.js가 개발되는 속도에 비해 너무 빠르게 증가한다. 초보자들에게는 양질의 자료, Node.js의 최근 동향을 말해주는 자료를 찾는 것이 매우 힘들 수 있다. 이 가이드의 목적은 정확한 최신 정보*latest stable version*를 제공하는 것이다.node.js의 안정버전인 node 0.4.x에 변화된 내용이 반영됐다. ## 자바스크립트이 가이드는 독자가 이미 Javascript를 알고 있다고 가정한다. Javascript를 모른다면 먼저 [Marijn Haverbeke][marijn]가 쓴 책인 [Eloquent JavaScript][eloquentjs]을 읽어야 한다. 이 책은 무료다.[eloquentjs]: http://eloquentjavascript.net/[marijn]: http://twitter.com/marijnjh## Hello World이 튜토리얼은 node.js를 설치하고 간단한 'hello world' http server를 만드는 방법을 설명한다.### 설치.먼저: node.js를 사용하려면 아직까지는 *nix 운영체제가 필요하다. Linux와 OSX를 추천한다. 하지만 FreeBSD나 cygwin(윈도우에서)으로도 할 수 있다. 윈도우용 node.js는 지금 작업중인데 아직 정식으로 공개할 단계가 아니다.node.js를 설치하는 가장 일반적인 방법은 소스를 다운 받아 직접 빌드하는 것이다. 물론 다양한 패키지 매니저가 있어서 패키지로 설치할 수도 있다. 그렇지만 패키지의 업데이트 주기가 일정치 못하기 때문에 나는 직접 소스로 설치하는 것을 추천한다.[nodejs.org][nodejs]에서 소스를 받을 수 있다. 다음과 같은 명령어로 v0.4.4를 다운받아 설치한다:[nodejs]: http://nodejs.org/~~~ {.shell}$ wget http://nodejs.org/dist/node-v0.4.4.tar.gz$ tar -xzf node-v0.4.4.tar.gz$ cd node-v0.4.4.tar.gz$ ./configure$ sudo make install~~~Node.js는 아주 일반적인 빌드 도구를 제외하고는 다른 것에 의존하지 않는다. 게다가 build 시스템으로 python을 사용한다. OSX에서는 XCode를 설치해야 하고 Ubuntu는 그냥 다음 명령을 실행하면 된다:~~~ {.shell}$ apt-get -y install build-essential~~~### node.js 쉘 사용하기잘 설치됐으면 node.js 쉘을 사용할 수 있다:~~~ {.shell}$ node> console.log('Hello World');Hello World~~~[REPL][]이라고 부르는 이 쉘은 간단한 코드를 실행해보기 매우 좋다. node.js 어플리케이션에 간단하게 바로 [첨부][repldocs]하기도 좋다. REPL에서 나가려면 Ctrl+C 키를 누른다.REPL에는 tab 자동완성같은 매우 훌륭한 기능도 많다. [repldocs]: http://nodejs.org/docs/v0.4.4/api/repl.html[REPL]: http://en.wikipedia.org/wiki/REPL### Your first programnods.js 프로그램를 작성하는 것은 '.js' 파일을 새로 만드는 것으로 시작한다. 예를 들어 'hello_world.js' 파일을 만들고 다음과 같은 내용을 넣는다:~~~ {.javascript}console.log('Hello World');~~~파일을 저장한 후에 터미널에서 다음과 같이 실행한다:~~~ {.shell}$ node hello.jsHello World~~~### hello world http server콘솔에서 'hellow world'를 출력하는 프로그램은 별로 대단하지 않다. http를 통해서 hello world를 출력하는 프로그램을 작성해보자. 우리는 다음과 같이 'hello_http.js'를 작성해서 호출한다:~~~ {.javascript}var http = require('http');var server = http.createServer(function(req, res) {  res.writeHead(200);  res.end('Hello Http');});server.listen(8080);~~~이제 터미널에서 실행해 보자:~~~ {.shell}$ node hello_http.js~~~이 프로그램이 처음 작성한 것과 다른 점은 바로 종료하지 않는 다는 것이다. node 프로그램은 항상 더 이상의 이벤트가 발생할 가능성이 없을 때까지 실행되기 때문에 종료하지 않는다. http 서버의 경우에는 이벤트가 계속 발생할 수 있다. 웹 브라우저로 간단하게 서버를 테스트할 수 있다. [http://localhost:8080/](http://localhost:8080/)에 접속해보자. 'Hello Http'라는 메시지를 볼 수 있을 것이다.터미널에서도 확인할 수 있다. curl로 서버에 접속해보자:~~~ {.shell}$ curl localhost:8080Hello Http~~~지금 우리가 작성한 프로그램을 좀 더 살펴보자. 우리는 첫 라인에서 http 코어 모듈을 include하고 http라는 변수에 할당 했다. 모듈 시스템에 대해서는 다음 단락에서 구체적으로 다룰 것이다.'http.createServer'를 호출하여 server라는 변수를 만들었다. 이 함수에 넘긴 인자는 http 요청이 있을 때마다 호출할 클로저이다. 마지막으로 'server.listen(8080)'을 호출해서 node.js에 열고 싶은 포트를 알렸다. 만약 80 포트에 서버를 띄우고 싶다면 root권한으로 실행시켜야 한다.이제 브라우저로 'localhost:8080'에 접속하면 클로저는 req와 res 객체를 인자로 실행될 것이다. req 객체는 읽기 전용 스트림으로 form 전송이나 파일 업로드 같은 들어오는 연결의 데이터가 담겨 있다. 'req 객체는 쓰기 전용 스트림으로 클라이언트에 데이터를 반환하는데 사용된다. 이 예제의 경우 단순히 200 OK 헤더와 'Hello Http'라는 바디를 보낸다. ## 모듈 시스템프로그램을 여러개의 파일로 구성할 수 있도록 node.js는 단순한 구조의 모듈 시스템을 제공한다.이 방법을 이해하려면 다음 내용이 담긴 'main.js' 파일을 만들어 보자:~~~ {.javascript}var hello = require('./hello');hello.world();~~~이미 눈치 챘겠지만 "require('./hello')"는 다른 자바스크립트 파일을 임포트하는데 사용한다. './'로 시작하는 것은 파일이 'main.js'와 같은 디렉토리에 있다는 것을 말한다. 그리고 '.js' 확장자는 자동으로 추가되기 때문에 파일 확장자를 명시하지 않는다.다음과 같은 내용으로 'hellow.js'파일을 만들어 보자:~~~ {.javascript}exports.world = function() {  console.log('Hello World');}~~~여기서는 exports 객체의 world 프로퍼티에 할당한다는 것을 기억해야 한다. 'exports' 객체는 모든 모듈에서 사용할 수 있고 모듈을 include하는데 사용하는 'require' 함수가 반환한다. 이제 우리가 만든 'main.js' 프로그램을 실행하면 다음과 같은 결과를 볼 수 있을 것이다:~~~ {.shell}$ node main.jsHello World~~~이 시점에서 알아야 할 게 또 있다. 많은 노드 유저들은 exports 객체를 다음과 같이 overwriting한다:~~~ {.javascript}module.exports = function() {  // ...}~~~벌써 알아 챘을 수도 있지만 `require` 함수는 할당한 함수를 반환한다. 이 것은 [객체 지향 프로그래밍][oopguide]과 비슷하다. 이 것은 클래스의 생성자에 해당한다.그 다음, 모듈 시스템에 대해 알아야 하는 것은 'require'의 용법이다. `require`는 포함하는 파일의 상대적 경로에 대한 정보를 가지지 않는다. 예를 들어:[oopguide]: object_oriented_programming.html~~~ {.javascript}var http = require('http');~~~이 때 node.js는 코어 모듈에 'http'라는게 있는 지를 먼저 찾는다. 만약 찾았으면 그걸 바로 반환한다. 그러나 mysql같은 non-core 모듈의 경우는 어떨까?~~~ {.javascript}var mysql = require('mysql');~~~이 경우 node.js는 디렉토리 트리를 뒤진다*walk up*. 부모 디렉토리로 이동해서 'node_modules'라는 디렉토리가 있는지 확인한다. 그런 폴더가 있으면 node.js는 그 폴더 안에서 'mysql.js'라는 파일을 찾는다. 만약 그런 파일이 없으면 디렉토리가 '/'에 도달할때까지 계속 부모 디렉토리로 이동한다. 만약 '/'에 도달하면 node.js는 중지하고 예외를 던진다.node.js는 'require.paths' 배열을 통해서도 파일을 찾을 찾는다. 이 배열은 런타임에도 변경할 수 있다. 그러나 이 기능은 곧 없어질 테니 못 본척하는게 좋다.진짜 마지막이다.*Last but not least* node.js는 'index.js' 파일도 사용한다. 디렉토리를 위해 사용되는 일종의 대표 파일*main include file*이다. 그러니까 `require('./foo')`라는 것은 'foo.js'라는 파일과 'foo/index.js'라는 파일 모두를 찾는다. ## EventEmitter 사용하기.Node.js는 EventEmitter라는 클래스를 사용하여 [옵저버 패턴][observerpattern]을 구현했다. 새로운 종류의 이벤트가 필요할 때마다 node.js는 EventEmitter를 상속한 클랙스를 만든다. EventEmitter는 쉽게 사용할 수 있다. 객체의 on함수를 호출하여 특정 이벤트를 처리*listen*할 수 있다. 이벤트의 이름과 callback 클로저를 on함수의 인자로 넘긴다. 예를 들어:[observerpattern]: http://en.wikipedia.org/wiki/Observer_pattern~~~ {.javascript}var data = '';req  .on('data', function(chunk) {    data += chunk;  })  .on('end', function() {    console.log('POST data: %s', data);  })~~~'()on'함수는 객체의 레퍼런스를 반환하기 때문에 이벤트 리스너의 체인을 만들 수 있다.만약 이벤트를 한 번만 처리하고 싶을 때에는 'once()'함수를 사용하면 편리하다.마지막으로 removeListener 함수를 호출하여 이벤트 리스너를 제거할 수 있다. 이 함수를 호출할 때 콜백함 수의 레퍼런스를 인자로 넘기는 것에 주의해야 한다. 다시 강조하지만 이벤트의 이름이 아니다:~~~ {.javascript}var onData = function(chunk) {  console.log(chunk);  req.removeListener(onData);}req.on('data', onData);~~~이 예제는 once()를 사용한 것과 완전히 똑같다.## Next Steps이제 기본적인 node.js를 배웠다. 이제 혼자 작은 프로그램을 만들어 볼 때가 됐다. [node의 api문서][nodeapidocs]를 참고하는 것이 좋다. node의 api문서는 즐거운 놀이동산과 다름없다.[nodeapidocs]: http://nodejs.org/docs/v0.4.4/api/## node.js 앱을 디버깅하기node.js 어플리케이션을 디버깅하는 방법은 여러가지다. 나는 개인적으로 단순한 방법으로 디버깅하길 좋아한다. 나는 [test driven development guide][tddguide]를 엄격하게 지키는 편이다.그리고 어플리케이션의 버그를 찾는 기술을 스스로 터득해야 한다. 여기에서는 단지 몇 가지 방법을 설명할 뿐이다.[tddguide]: test_driven_development.html### console.log() 사용하기프로그램을 이해하는 가장 쉬운 방법은 console.log()를 사용하여 객체를 inspect하는 것이다. 단순히 인자로 객체를 넘기면 된다:~~~ {.javascript}var foo = {bar: 'foobar'};console.log(foo);~~~디버그 출력를 정열*format*하기 위해 sprintf처럼 사용할 수도 있다.~~~ {.javascript}var foo = {bar: 'foobar'};console.log('Hello %s, this is my object: %j', 'World', foo);~~~### node 디버거 사용하기.console.log()을 사용하는 것이 맘에 들지 않을 수도 있고 어떤 문제는 breakpoint를 사용하는 것이 좋을 수도 있다. node에 포함돼 있는 디버거를 바로 호출해서 사용할 수 있다:~~~ {.shell}$ node.js debug my_file.js~~~*Work in progress, please come back later ...*### Using the WebKit Inspector*Work in progress, please come back later ...*## Frameworks아무리 node.js가 처음이라고 해도 POST 요청을 파싱하고 url을 라우팅하고 뷰를 렌더링하는 것들을 만들고 싶지는 않을 것이다. 우리는 좋은 웹 프레임워크가 간절히 필요하다. 이 단락에서는 사람들이 많이 사용하는 프레임워크를 간략하게 소개한다. ### Express[express][express]는 node.js 프레임워크 선수진들 중에서 주전 프레임워크라고 할 수 있다. 상대적으로 성숙돼있고 [connect][connect]를 미들레이어로 사용한다. 이 프레임워크에는 라우팅, 설정, 템플릿 엔진, POST 리퀘스트 파싱 등등의 기능이 포함돼 있다.express는 프레임쿼크로서 갖쳐야 될 요소를 모두 갖추고 있지만 Rails, CakePHP, Django같은 풀스택 프레임워크이라기 보다는 커버하는 범위가 적다. express는 Sinatra랑 좀 더 유사하다. 그리고 이 것은 Ruby에 뿌리를 두고 있는데 자바스크립트에 적합하도록 자바스크립트에 맞추려는 노력을 기울일 것 같지 않다. 어쨌든 직접 프레임워크를 작성하는 것에 비하면 너무나 훌륭하다.[express]: http://expressjs.com/[connect]: https://github.com/senchalabs/connect### fab.js자바스크립트를 좀 안다고 생각하나? 다시 생각해야 한다. 원래 이 것은 jQuery의 chaining에서 영향을 받았다. [fab.js][fabjs]는 자바스크립트를 뒤틀어 사람들의 뇌용량을 초과하는 매우 익숙하지 않은 방식을 사용한다. 각 함수는 다른 함수를 반환한다. lisp이 하는 것처럼 코드를 반환하기 때문에 메소드 이름이 전혀 필요없다.fab.js가 완벽해지길 기다리지 마라. node.js라는 칼을 뽑았다면 적어도 한번은 fab.js를 썰어보는게 좋다. fab.js는 자바스크립트가 Ruby, Python, PHP등의 프레임워크들을 따라한 것이 아니라 독자적인 철학을 가지고 있음을 보여준다.[fabjs]: http://fabjs.org/## Hosting & Deployment### 쉽지만 아쉬운 Deployment이제 node.js 어플리케이션을 만들었으면 가능한 빨리 실행해보고 싶을 것이다. 여기에서는 그 방법을 설명한다.1. 프로그램을 실행시킬 서버로 복사한다. 만약 git을 사용하고 있으면 레파지토리가 있는 서버나 [GitHub][]같은 서비스에서 그냥 다른 서버로 clone하면 된다.[GitHub]: http://github.com/2. 프로그램이 server.js 파일이라면 그 파일이 있는 디렉토리로 이동해서 다음과 같이 실행한다:    ~~~ {.shell}    $ screen    $ node server.js    ~~~Screen 세션에서 'server.js' 프로그램을 실행했다. Screen은 쉘에서 로그인한 터미널 앱을 닫아도 그 상태를 계속 유지시켜주는 프로그램이다. 이제 터미널 앱을 닫아도 안전하다. 'server.js'는 계속 실행되고 있다. 만약 실행중인 프로그램을 다시 보고 싶으면 서버로 다시 로그인해서 다음과 같은 명령을 실행한다: ~~~ {.shell}$ screen -r~~~이 명령은 백그라운드에서 프로그램이 실행되고 있는 쉘에 다시 연결시켜준다.그러나 이 방법은 오직 실험중일 때만 사용하는 것이 좋다. 이 것은 node 어플리케이션이 죽어버렸을 때 다시 실행시켜주지 않는다. 그래서 실제 production 환경에서 사용하는 것은 좋지 않다.### Joyent no.de*Work in progress, please come back later ...*